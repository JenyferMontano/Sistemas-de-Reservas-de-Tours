// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reserva.sql

package dto

import (
	"context"
	"database/sql"
)

const createReserva = `-- name: CreateReserva :execresult
INSERT INTO reservas.Reserva (
    numReserva, fechaReserva, horaReserva, cantidadPersonas, tour, usuario, persona, transfer
) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateReservaParams struct {
	Numreserva       int32  `json:"numreserva"`
	Fechareserva     string `json:"fechareserva"`
	Horareserva      string `json:"horareserva"`
	Cantidadpersonas int32  `json:"cantidadpersonas"`
	Tour             int32  `json:"tour"`
	Usuario          string `json:"usuario"`
	Persona          int32  `json:"persona"`
	Transfer         int32  `json:"transfer"`
}

func (q *Queries) CreateReserva(ctx context.Context, arg CreateReservaParams) (sql.Result, error) {
	return q.exec(ctx, q.createReservaStmt, createReserva,
		arg.Numreserva,
		arg.Fechareserva,
		arg.Horareserva,
		arg.Cantidadpersonas,
		arg.Tour,
		arg.Usuario,
		arg.Persona,
		arg.Transfer,
	)
}

const deleteReserva = `-- name: DeleteReserva :exec
DELETE FROM reservas.Reserva WHERE numReserva = ?
`

func (q *Queries) DeleteReserva(ctx context.Context, numreserva int32) error {
	_, err := q.exec(ctx, q.deleteReservaStmt, deleteReserva, numreserva)
	return err
}

const getAllReservas = `-- name: GetAllReservas :many
SELECT r.numReserva, r.fechaReserva, r.horaReserva, 
       r.cantidadPersonas, 
       t.nombre AS nombreTour, 
       u.userName AS nombreUsuario, 
       p.nombre AS nombrePersona, 
       tr.idTransfer AS idTransfer
FROM reservas.Reserva r
JOIN reservas.Tour t ON r.tour = t.idTour
JOIN reservas.Usuario u ON r.usuario = u.userName
JOIN reservas.Persona p ON r.persona = p.idPersona
JOIN reservas.Transfer tr ON r.transfer = tr.idTransfer
`

type GetAllReservasRow struct {
	Numreserva       int32  `json:"numreserva"`
	Fechareserva     string `json:"fechareserva"`
	Horareserva      string `json:"horareserva"`
	Cantidadpersonas int32  `json:"cantidadpersonas"`
	Nombretour       string `json:"nombretour"`
	Nombreusuario    string `json:"nombreusuario"`
	Nombrepersona    string `json:"nombrepersona"`
	Idtransfer       int32  `json:"idtransfer"`
}

func (q *Queries) GetAllReservas(ctx context.Context) ([]GetAllReservasRow, error) {
	rows, err := q.query(ctx, q.getAllReservasStmt, getAllReservas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllReservasRow
	for rows.Next() {
		var i GetAllReservasRow
		if err := rows.Scan(
			&i.Numreserva,
			&i.Fechareserva,
			&i.Horareserva,
			&i.Cantidadpersonas,
			&i.Nombretour,
			&i.Nombreusuario,
			&i.Nombrepersona,
			&i.Idtransfer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFacturaByReservaId = `-- name: GetFacturaByReservaId :one
SELECT idFactura 
FROM reservas.Factura 
WHERE reserva = ?
`

func (q *Queries) GetFacturaByReservaId(ctx context.Context, reserva int32) (int32, error) {
	row := q.queryRow(ctx, q.getFacturaByReservaIdStmt, getFacturaByReservaId, reserva)
	var idfactura int32
	err := row.Scan(&idfactura)
	return idfactura, err
}

const getReservaById = `-- name: GetReservaById :one
SELECT numReserva, fechaReserva, horaReserva, cantidadPersonas, tour, usuario, persona, transfer
FROM reservas.Reserva
WHERE numReserva = ?
`

func (q *Queries) GetReservaById(ctx context.Context, numreserva int32) (ReservasReserva, error) {
	row := q.queryRow(ctx, q.getReservaByIdStmt, getReservaById, numreserva)
	var i ReservasReserva
	err := row.Scan(
		&i.Numreserva,
		&i.Fechareserva,
		&i.Horareserva,
		&i.Cantidadpersonas,
		&i.Tour,
		&i.Usuario,
		&i.Persona,
		&i.Transfer,
	)
	return i, err
}

const updateReserva = `-- name: UpdateReserva :exec
UPDATE reservas.Reserva
SET fechaReserva = ?, horaReserva = ?, cantidadPersonas = ?, tour = ?, usuario = ?, persona = ?, transfer = ?
WHERE numReserva = ?
`

type UpdateReservaParams struct {
	Fechareserva     string `json:"fechareserva"`
	Horareserva      string `json:"horareserva"`
	Cantidadpersonas int32  `json:"cantidadpersonas"`
	Tour             int32  `json:"tour"`
	Usuario          string `json:"usuario"`
	Persona          int32  `json:"persona"`
	Transfer         int32  `json:"transfer"`
	Numreserva       int32  `json:"numreserva"`
}

func (q *Queries) UpdateReserva(ctx context.Context, arg UpdateReservaParams) error {
	_, err := q.exec(ctx, q.updateReservaStmt, updateReserva,
		arg.Fechareserva,
		arg.Horareserva,
		arg.Cantidadpersonas,
		arg.Tour,
		arg.Usuario,
		arg.Persona,
		arg.Transfer,
		arg.Numreserva,
	)
	return err
}
