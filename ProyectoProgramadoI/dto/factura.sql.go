// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: factura.sql

package dto

import (
	"context"
	"database/sql"
)

const createFactura = `-- name: CreateFactura :execresult
INSERT INTO reservas.Factura (idFactura, fechaFact, metodoPago, iva, descuento, subtotal, total, reserva)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateFacturaParams struct {
	Idfactura  int32  `json:"idfactura"`
	Fechafact  string `json:"fechafact"`
	Metodopago string `json:"metodopago"`
	Iva        string `json:"iva"`
	Descuento  string `json:"descuento"`
	Subtotal   string `json:"subtotal"`
	Total      string `json:"total"`
	Reserva    int32  `json:"reserva"`
}

func (q *Queries) CreateFactura(ctx context.Context, arg CreateFacturaParams) (sql.Result, error) {
	return q.exec(ctx, q.createFacturaStmt, createFactura,
		arg.Idfactura,
		arg.Fechafact,
		arg.Metodopago,
		arg.Iva,
		arg.Descuento,
		arg.Subtotal,
		arg.Total,
		arg.Reserva,
	)
}

const deleteFactura = `-- name: DeleteFactura :exec
DELETE FROM reservas.Factura WHERE idFactura = ?
`

func (q *Queries) DeleteFactura(ctx context.Context, idfactura int32) error {
	_, err := q.exec(ctx, q.deleteFacturaStmt, deleteFactura, idfactura)
	return err
}

const getAllFacturas = `-- name: GetAllFacturas :many
SELECT 
    f.idFactura,
    f.fechaFact,
    f.metodoPago,
    f.iva,
    f.descuento,
    f.subtotal,
    f.total,
    r.numReserva,
    r.fechaReserva,
    r.horaReserva,
    r.cantidadPersonas,
    p.nombre AS nombreCliente,
    p.apellido_1,
    p.apellido_2
FROM reservas.Factura f
JOIN reservas.Reserva r ON f.reserva = r.numReserva
JOIN reservas.Persona p ON r.persona = p.idPersona
`

type GetAllFacturasRow struct {
	Idfactura        int32  `json:"idfactura"`
	Fechafact        string `json:"fechafact"`
	Metodopago       string `json:"metodopago"`
	Iva              string `json:"iva"`
	Descuento        string `json:"descuento"`
	Subtotal         string `json:"subtotal"`
	Total            string `json:"total"`
	Numreserva       int32  `json:"numreserva"`
	Fechareserva     string `json:"fechareserva"`
	Horareserva      string `json:"horareserva"`
	Cantidadpersonas int32  `json:"cantidadpersonas"`
	Nombrecliente    string `json:"nombrecliente"`
	Apellido1        string `json:"apellido_1"`
	Apellido2        string `json:"apellido_2"`
}

func (q *Queries) GetAllFacturas(ctx context.Context) ([]GetAllFacturasRow, error) {
	rows, err := q.query(ctx, q.getAllFacturasStmt, getAllFacturas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFacturasRow
	for rows.Next() {
		var i GetAllFacturasRow
		if err := rows.Scan(
			&i.Idfactura,
			&i.Fechafact,
			&i.Metodopago,
			&i.Iva,
			&i.Descuento,
			&i.Subtotal,
			&i.Total,
			&i.Numreserva,
			&i.Fechareserva,
			&i.Horareserva,
			&i.Cantidadpersonas,
			&i.Nombrecliente,
			&i.Apellido1,
			&i.Apellido2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFacturaById = `-- name: GetFacturaById :one
SELECT 
    f.idFactura,
    f.fechaFact,
    f.metodoPago,
    f.iva,
    f.descuento,
    f.subtotal,
    f.total,
    r.numReserva,
    r.fechaReserva,
    r.horaReserva,
    r.cantidadPersonas,
    p.nombre AS nombreCliente,
    p.apellido_1,
    p.apellido_2
FROM reservas.Factura f
JOIN reservas.Reserva r ON f.reserva = r.numReserva
JOIN reservas.Persona p ON r.persona = p.idPersona
WHERE f.idFactura = ?
`

type GetFacturaByIdRow struct {
	Idfactura        int32  `json:"idfactura"`
	Fechafact        string `json:"fechafact"`
	Metodopago       string `json:"metodopago"`
	Iva              string `json:"iva"`
	Descuento        string `json:"descuento"`
	Subtotal         string `json:"subtotal"`
	Total            string `json:"total"`
	Numreserva       int32  `json:"numreserva"`
	Fechareserva     string `json:"fechareserva"`
	Horareserva      string `json:"horareserva"`
	Cantidadpersonas int32  `json:"cantidadpersonas"`
	Nombrecliente    string `json:"nombrecliente"`
	Apellido1        string `json:"apellido_1"`
	Apellido2        string `json:"apellido_2"`
}

func (q *Queries) GetFacturaById(ctx context.Context, idfactura int32) (GetFacturaByIdRow, error) {
	row := q.queryRow(ctx, q.getFacturaByIdStmt, getFacturaById, idfactura)
	var i GetFacturaByIdRow
	err := row.Scan(
		&i.Idfactura,
		&i.Fechafact,
		&i.Metodopago,
		&i.Iva,
		&i.Descuento,
		&i.Subtotal,
		&i.Total,
		&i.Numreserva,
		&i.Fechareserva,
		&i.Horareserva,
		&i.Cantidadpersonas,
		&i.Nombrecliente,
		&i.Apellido1,
		&i.Apellido2,
	)
	return i, err
}

const updateFactura = `-- name: UpdateFactura :exec
UPDATE reservas.Factura
SET metodoPago = ?, iva = ?, descuento = ?, subtotal = ?, total = ?
WHERE idFactura = ?
`

type UpdateFacturaParams struct {
	Metodopago string `json:"metodopago"`
	Iva        string `json:"iva"`
	Descuento  string `json:"descuento"`
	Subtotal   string `json:"subtotal"`
	Total      string `json:"total"`
	Idfactura  int32  `json:"idfactura"`
}

func (q *Queries) UpdateFactura(ctx context.Context, arg UpdateFacturaParams) error {
	_, err := q.exec(ctx, q.updateFacturaStmt, updateFactura,
		arg.Metodopago,
		arg.Iva,
		arg.Descuento,
		arg.Subtotal,
		arg.Total,
		arg.Idfactura,
	)
	return err
}
